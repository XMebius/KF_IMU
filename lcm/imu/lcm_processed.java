/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package imu;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class lcm_processed implements lcm.lcm.LCMEncodable
{
    public float accx_p;
    public float accy_p;
    public float accz_p;
 
    public lcm_processed()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xe13a199092ab54d3L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(imu.lcm_processed.class))
            return 0L;
 
        classes.add(imu.lcm_processed.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeFloat(this.accx_p); 
 
        outs.writeFloat(this.accy_p); 
 
        outs.writeFloat(this.accz_p); 
 
    }
 
    public lcm_processed(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public lcm_processed(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static imu.lcm_processed _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        imu.lcm_processed o = new imu.lcm_processed();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.accx_p = ins.readFloat();
 
        this.accy_p = ins.readFloat();
 
        this.accz_p = ins.readFloat();
 
    }
 
    public imu.lcm_processed copy()
    {
        imu.lcm_processed outobj = new imu.lcm_processed();
        outobj.accx_p = this.accx_p;
 
        outobj.accy_p = this.accy_p;
 
        outobj.accz_p = this.accz_p;
 
        return outobj;
    }
 
}

